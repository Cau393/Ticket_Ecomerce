"""
Django settings for CDPIQRCode project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
from os import getenv
from dotenv import load_dotenv
load_dotenv()

from dj_database_url import parse
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#REDIS
REDIS_URL_LOCAL=getenv('REDIS_URL_LOCAL')
REDIS_URL=getenv('REDIS_URL')
REDIS_PASSWORD=getenv('REDIS_PASSWORD')
REDIS_USERNAME=getenv('REDIS_USERNAME')
HOST=getenv('HOST')
PORT=getenv('PORT')
DECODE_RESPONSES=getenv('DECODE_RESPONSES')

# SendGrid API
SENDGRID_API_KEY=getenv('SENDGRID_API_KEY')
FROM_EMAIL=getenv('FROM_EMAIL')

# CORS config
CORS_ALLOWED_ORIGINS=getenv('CORS_ALLOWED_ORIGINS')

# DB
DATABASE_URL=getenv('DATABASE_URL')




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = getenv('DEBUG_MODE')

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #My Apps
    'mainForm',

    #3rd Party Apps
    'rest_framework',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'CDPIQRCode.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CDPIQRCode.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': parse(DATABASE_URL)
}


# --- CORS CONFIGURATION ---
# Read the comma-separated string from the environment
allowed_origins_str = CORS_ALLOWED_ORIGINS

# Split the string by the comma to create the Python list
CORS_ALLOWED_ORIGINS = allowed_origins_str.split(',') if allowed_origins_str else []


# --- CELERY CONFIGURATION ---
# We use a single environment variable for the broker and result backend
# to keep the configuration simple and DRY.

CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL

# It's a good practice to use JSON as the serializer.
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# Broker transport options to handle connection timeouts
CELERY_BROKER_TRANSPORT_OPTIONS = {
    'visibility_timeout': 3600,  # 1 hour
    'health_check_interval': 30, # Check connection every 30 seconds
}

# Enable broker connection retries
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True

# Set the timezone for Celery to match Django's.
CELERY_TIMEZONE = getenv('TIME_ZONE', 'UTC')

# A setting to help with monitoring tasks.

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon_user_creation': '10/hour',  # 10 user creations per hour per IP
        'user_checkin': '100/hour',       # 100 check-ins per hour per IP
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'api.log',
        },
    },
    'loggers': {
        'mainForm': {  # Replace with your app name
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
