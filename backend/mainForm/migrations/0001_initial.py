# Generated by Django 5.2.4 on 2025-08-13 08:12

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
import localflavor.br.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='E-mail')),
                ('full_name', models.CharField(max_length=150, verbose_name='Nome Completo')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='Telefone')),
                ('cpf', localflavor.br.models.BRCPFField(max_length=14, verbose_name='CPF')),
                ('date_of_birth', models.DateField(verbose_name='Data de Nascimento')),
                ('address', models.CharField(max_length=255, verbose_name='Endereço')),
                ('city', models.CharField(max_length=100, verbose_name='Cidade')),
                ('state', localflavor.br.models.BRStateField(max_length=2, verbose_name='Estado')),
                ('postal_code', localflavor.br.models.BRPostalCodeField(max_length=9, verbose_name='CEP')),
                ('partner_company', models.CharField(blank=True, default=None, max_length=200, null=True, verbose_name='Empresa Parceira')),
                ('privacy_consent', models.BooleanField(default=False, verbose_name='Consentimento LGPD')),
                ('marketing_consent', models.BooleanField(default=False, verbose_name='Aceita Marketing')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'ordering': ['full_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nome do Evento')),
                ('description', models.TextField(verbose_name='Descrição')),
                ('start', models.DateTimeField(verbose_name='Data/Hora de Início')),
                ('end', models.DateTimeField(verbose_name='Data/Hora de Término')),
                ('location', models.CharField(max_length=300, verbose_name='Local')),
                ('city', models.CharField(max_length=100, verbose_name='Cidade')),
                ('state', localflavor.br.models.BRStateField(max_length=2, verbose_name='Estado')),
                ('image', models.ImageField(blank=True, upload_to='events/', verbose_name='Imagem do Evento')),
                ('speakers', models.TextField(blank=True, verbose_name='Palestrantes')),
                ('is_active', models.BooleanField(default=True, verbose_name='Ativo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Evento',
                'verbose_name_plural': 'Eventos',
                'ordering': ['start'],
                'indexes': [models.Index(fields=['start', 'is_active'], name='mainForm_ev_start_e3abef_idx')],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Valor Total')),
                ('status', models.CharField(choices=[('pendente', 'Pendente'), ('pago', 'Pago'), ('falha', 'Falha'), ('estornado', 'Estornado')], default='pendente', max_length=30)),
                ('state', models.CharField(choices=[('ativo', 'Ativo'), ('cancelado', 'Cancelado'), ('expirado', 'Expirado')], default='ativo', max_length=30)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Expira em')),
                ('redemption_token', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Token de Resgate')),
                ('payment_method', models.CharField(blank=True, choices=[('pix', 'PIX'), ('boleto', 'Boleto Bancário'), ('credit_card', 'Cartão de Crédito'), ('debit_card', 'Cartão de Débito'), ('cortesia', 'Cortesia')], max_length=20)),
                ('payment_id', models.CharField(blank=True, max_length=200, verbose_name='ID do Pagamento')),
                ('payment_data', models.JSONField(blank=True, default=dict)),
                ('paid_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Pedido',
                'verbose_name_plural': 'Pedidos',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_type', models.CharField(choices=[('ticket_confirmation', 'Confirmação de Ingresso'), ('complimentary_link', 'Link de Cortesia'), ('payment_confirmation', 'Confirmação de Pagamento'), ('payment_reminder', 'Lembrete de Pagamento'), ('event_reminder', 'Lembrete do Evento'), ('event_update', 'Atualização do Evento')], max_length=50, verbose_name='Tipo')),
                ('subject', models.CharField(max_length=200, verbose_name='Assunto')),
                ('sent_at', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField(default=True, verbose_name='Sucesso')),
                ('error_message', models.TextField(blank=True, verbose_name='Mensagem de Erro')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='mainForm.order')),
            ],
            options={
                'verbose_name': 'Log de E-mail',
                'verbose_name_plural': 'Logs de E-mail',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('subtotal', models.DecimalField(decimal_places=2, max_digits=10)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainForm.event')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='mainForm.order')),
            ],
        ),
        migrations.CreateModel(
            name='PaymentWebhook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider', models.CharField(max_length=50)),
                ('webhook_id', models.CharField(blank=True, max_length=200)),
                ('event_type', models.CharField(max_length=100)),
                ('payload', models.JSONField()),
                ('processed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhooks', to='mainForm.order')),
            ],
            options={
                'verbose_name': 'Webhook de Pagamento',
                'verbose_name_plural': 'Webhooks de Pagamento',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qr_code', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Código QR')),
                ('is_redeemed', models.BooleanField(default=False, verbose_name='Resgatado')),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('redeemed_at', models.DateTimeField(blank=True, null=True, verbose_name='Resgatado em')),
                ('redeemed_by_staff', models.CharField(blank=True, max_length=100, verbose_name='Resgatado por')),
                ('holder_name', models.CharField(blank=True, max_length=150, verbose_name='Nome do Portador')),
                ('holder_email', models.EmailField(blank=True, max_length=254, verbose_name='E-mail do Portador')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='mainForm.order', verbose_name='Pedido')),
                ('order_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tickets', to='mainForm.orderitem', verbose_name='Item do Pedido')),
            ],
            options={
                'verbose_name': 'Ingresso',
                'verbose_name_plural': 'Ingressos',
                'ordering': ['issued_at'],
            },
        ),
        migrations.CreateModel(
            name='TicketClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Geral', max_length=100, verbose_name='Nome')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Preço')),
                ('ticket_type', models.CharField(choices=[('geral', 'Geral'), ('cortesia', 'Cortesia'), ('vip', 'VIP')], default='geral', max_length=20)),
                ('description', models.TextField(blank=True, verbose_name='Descrição')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_classes', to='mainForm.event')),
            ],
            options={
                'verbose_name': 'Classe de Ingresso',
                'verbose_name_plural': 'Classes de Ingresso',
            },
        ),
        migrations.AddField(
            model_name='orderitem',
            name='ticket_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainForm.ticketclass'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status', 'created_at'], name='mainForm_or_status_d18e47_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user', 'created_at'], name='mainForm_or_user_id_b70f7f_idx'),
        ),
        migrations.AddIndex(
            model_name='ticket',
            index=models.Index(fields=['qr_code'], name='mainForm_ti_qr_code_8a28cc_idx'),
        ),
    ]
